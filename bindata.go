// Code generated by go-bindata.
// sources:
// frontend/assets/application.coffee
// frontend/assets/application.js
// frontend/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _frontendAssetsApplicationCoffee = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x6e\xdb\x38\x10\xbd\xf3\x2b\x06\x8e\x77\x25\x2d\x6c\x45\xc9" +
	"\xde\x02\x28\xbd\xf4\x92\x22\x6d\x82\xba\xb7\xa2\x07\x46\x1c\xc9\x84\x69\x52\x20\x29\x0b\x41\x90\x7f\x2f\x48\x51" +
	"\x96\x14\xcb\x49\x7b\x12\xc8\x79\xef\xcd\xf0\xcd\x90\xe2\x25\xb4\x5c\x32\xd5\xa6\x1b\xab\x34\xad\x10\xa8\x64\xfd" +
	"\xd6\x97\xcd\xc3\x37\x02\xfd\x6a\x69\x02\x22\x87\x78\x87\xcf\x09\xac\x6f\x09\x00\x80\x41\x7b\x03\xf1\x81\x8a\x06" +
	"\x8f\x7b\x00\x42\x15\x54\x04\xcd\xd4\xa0\xbd\xb3\xb8\x77\xb4\x15\x38\xd5\xd4\x58\xcd\x65\xc5\xcb\xe7\x40\x4c\x3c" +
	"\xad\x72\x52\x47\x09\x6e\x71\x0f\xf9\x54\xa9\x1a\x94\x92\x00\xf3\x7a\x35\xd5\x06\x63\xc7\x48\x80\x97\x9e\x4a\xc8" +
	"\xb2\xd3\x0a\xf5\x0b\x6a\xec\xbd\xa2\x0c\x72\x90\xaa\x8d\x93\x21\xa2\xb1\xd4\x68\xb6\x8f\xd4\x98\x56\x69\x07\xf8" +
	"\x3f\xcb\xb2\x6c\x00\x58\x5e\xec\x50\xdf\x49\x8b\xfa\x40\x05\xe4\x70\x9d\x65\xe4\x6d\x18\x72\x67\xc5\x11\xe4\x36" +
	"\x57\xf3\x02\x04\x60\x19\x47\x17\xa5\x2a\x1a\x83\xec\x4e\xd6\x8d\x8d\x92\xf4\x89\x4b\x06\x51\x21\x78\xb1\x8b\x56" +
	"\x60\xac\xaa\xbf\x77\x75\xbd\x07\x7f\x12\x8d\x8e\x56\xa0\xd1\x58\xaa\xed\x94\xa0\x6a\xcb\x95\xdc\xd0\x03\x9e\xaa" +
	"\xd3\x03\x3e\xf8\xb0\x71\xe7\x10\x8a\xb2\xb0\xf4\xbe\xb8\x75\xef\x46\x9c\x10\x22\x55\xeb\xba\x1e\xda\xeb\x1d\xc4" +
	"\x16\x3e\x53\x8b\x1e\xce\x5c\x5b\x7e\xf0\xbd\x5b\x91\x51\xe1\x23\x4e\x21\x90\x1e\xcf\x1f\x4f\x5c\x49\xe6\xcf\x67" +
	"\x50\x60\x61\xbd\x7e\x49\x85\x41\x42\xa6\x87\x1c\x89\x7f\xd8\xe0\xbf\x6e\x10\x31\x68\x1f\xb5\xaa\x34\x1a\xe3\x12" +
	"\xd5\xa8\x8b\x90\x6c\x19\x47\x69\x1d\x42\xeb\x27\xaa\xa3\x24\x2d\x8c\x89\xa3\x96\x33\xbb\x8d\x56\xb0\xb8\x78\x71" +
	"\xe8\xd7\x7f\x16\x09\x21\x63\x23\x47\x05\x77\x9d\x31\x7e\xb8\xa7\xce\x2f\x9d\x95\xb0\xb8\x3c\x5c\x5d\x56\x68\x7b" +
	"\xea\x27\x81\xb2\xb2\xdb\xfc\xe2\x25\x30\xd3\x3a\x44\xee\x7d\xe0\xf5\x5f\x53\x63\xc1\xa9\x18\x21\x1a\x83\x9b\x6e" +
	"\xf3\x75\xb1\x82\x98\x51\x4b\x8f\xd7\x73\xc6\x6e\xd7\x16\x8f\xf1\x80\x73\x8e\x92\xd1\xe0\xcc\x9d\xc7\x93\xa7\xb5" +
	"\xdd\xf8\x6c\xd3\xbd\x4e\x21\x64\xed\x32\x0e\xe5\x76\x84\x61\xdd\x83\x7f\x66\xbf\xd2\x62\x8b\xc5\x0e\x19\x39\x7d" +
	"\x95\xe2\x68\x83\x45\xa3\xb1\xb7\x2c\x14\xe9\x07\xc9\xc6\xa1\xc0\x7e\xd4\x0c\x5a\xcb\x65\x65\xbe\x2a\x46\x45\x94" +
	"\xa4\x7b\xf7\x8d\xa3\x2d\x67\x18\xcd\xcd\xff\xa8\x4b\xb3\x5d\xfc\xe3\x5a\x2a\xec\x26\x9a\x97\x03\x3b\x87\x46\x32" +
	"\x2c\xb9\x44\xe6\x9d\x98\x9a\x79\x6a\xe7\x75\x16\x02\x63\xcb\xba\x2b\x02\x1f\x79\x3d\x3f\x3e\xbd\x2d\xef\x7a\x0e" +
	"\x39\x9c\x8e\xd6\xe0\x02\x21\xee\x0a\x8d\x5f\x09\x5e\x96\xfd\xdc\xc0\xfa\xed\x44\x11\x00\x77\x4b\x1c\xfe\xcc\x23" +
	"\xbc\xf6\x0a\x09\x5c\x9e\x7b\xa5\xff\x83\x2b\xff\x46\x8f\xaf\xaa\xd3\xec\xec\xf5\xe9\x6f\xf3\x33\x64\xd2\xfd\xa2" +
	"\x26\x5d\xfe\x1d\x00\x00\xff\xff\x19\x94\x55\x68\x0b\x07\x00\x00")

func frontendAssetsApplicationCoffeeBytes() ([]byte, error) {
	return bindataRead(
		_frontendAssetsApplicationCoffee,
		"frontend/assets/application.coffee",
	)
}

func frontendAssetsApplicationCoffee() (*asset, error) {
	bytes, err := frontendAssetsApplicationCoffeeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/assets/application.coffee", size: 1803, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1431268437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendAssetsApplicationJs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x8f\xe4\x34\x10\xbd\xf7\xaf\x28\x0d\xcd\xc4\x61\x33\xe9\x9e" +
	"\x81\xd3\x8e\x02\x07\x90\xd0\xa0\x85\x5d\xd1\xdc\x10\x07\x8f\x53\x49\x5b\xe3\x89\x23\xdb\xe9\xd6\x08\xe5\xbf\x23" +
	"\x7f\x24\x71\xd2\x1f\x0b\xec\xa9\xdb\x76\xb9\xea\xf9\xbd\xe7\x72\x36\x1b\xf8\x19\x1b\x54\xd4\x60\x09\xcf\x6f\xf0" +
	"\xa3\xac\x2a\xc4\x1d\x53\xbc\x35\x70\x9f\xdf\x3f\xe4\xdf\xad\x48\xd5\x35\xcc\x70\xd9\x90\x14\xfe\x5e\x01\x1c\xa8" +
	"\x02\x21\x69\xf9\xb1\xb5\x93\x3a\x73\x83\x4f\x54\xeb\xa3\x54\x65\x06\x8d\x3c\x66\xa0\x50\x1b\xaa\xcc\xef\x58\x29" +
	"\xd4\xfb\x0c\x34\x3d\xe0\x18\xaf\xd1\x7c\x52\xb2\x56\xa8\xed\xc0\xc8\x76\x0c\x33\x9c\xbd\x3c\xae\x56\x00\xbc\x02" +
	"\x72\xe4\x4d\x29\x8f\xf9\xce\x48\x45\x6b\x84\xdb\x5b\x08\x33\xbf\xec\x3e\xfe\xe6\xa1\xc0\x30\xb5\xd6\x21\xaa\x80" +
	"\x11\xed\x0b\xbe\x0d\x51\x00\x0a\x4d\xa7\x9a\x71\x08\x16\xc4\xfb\x29\xf6\x40\x45\x87\x69\xb4\x3c\xee\x10\x92\x51" +
	"\x11\x30\xe4\x1a\xcd\x93\xc1\x57\x9b\x3a\x03\x0b\x23\xd7\x46\xf1\xa6\xe6\xd5\x5b\x48\x91\x3e\x8e\x29\xfa\x6c\xfc" +
	"\x5b\xcf\x8a\xcd\xeb\x58\x3a\xb9\xc1\xd7\xc7\x68\xce\x8e\xa1\x98\xd7\xae\xa7\xda\xe9\x2c\xb6\x02\x62\xe3\xe7\x59" +
	"\x47\xfc\x0e\x65\x4b\x95\x46\x1f\x15\x6f\xed\x57\xcb\x7f\xbd\x5f\x76\x3f\xbd\x15\x62\xbd\x54\x7f\xa4\x5c\x50\x6d" +
	"\x3e\x48\x5a\x42\x61\x25\x27\x21\x71\x58\x54\x5e\xd1\xc1\x15\x50\xc0\xb7\xdb\xed\x76\x3b\x8b\xb1\x62\xa3\x7a\x6a" +
	"\x0c\xaa\x03\x15\x50\xc0\xc3\xd9\x00\x28\xac\x56\x43\x18\xb1\x93\xd9\xf9\x14\x01\xc2\x9a\x24\x5f\x55\x92\x75\x1a" +
	"\xcb\xa7\xa6\xed\x4c\x92\xe6\xcf\xbc\x29\x49\xc2\x04\x67\x2f\xc9\xcc\x72\x9f\xdb\xf2\x2c\x3a\x95\x2c\xed\x1c\x6d" +
	"\x92\xce\xd3\x3b\x7a\xc0\xd3\x2a\x93\xe5\xc3\x86\xe8\xd2\x0c\x74\x8d\x26\x9b\x6e\x90\x5f\xea\x53\x77\x0f\x1a\x79" +
	"\x8c\x2d\x3d\x48\x60\x3d\x53\xfa\x0c\x8e\x7f\x3c\xc2\x4f\xd4\xe0\x22\x6b\x69\x3d\xf3\x07\x7f\x0d\xf3\xbd\xcb\x18" +
	"\x1d\xfe\x5c\x66\x26\x90\x8e\x84\x92\x19\xcd\x97\xb9\xd2\x28\x90\x99\x45\xf5\x8a\x0a\x8d\x53\xdd\x39\x85\xe7\x4a" +
	"\x5f\xf5\x55\x48\xfa\x25\xce\x08\xe7\x9f\x9a\x4f\x0c\xa2\x45\xc5\x06\x20\xa1\xd6\x9a\x24\x79\x1b\x42\xef\x9e\xa9" +
	"\x4a\xd2\x9c\x69\x4d\x92\x23\x2f\xcd\x3e\xc9\xc0\x6e\x81\x77\x70\xf3\xf5\x4d\x94\x3e\x56\xf2\x92\x72\xde\x34\xda" +
	"\x1f\x2c\x0c\xdc\x6d\xbf\x64\x8f\xb5\x15\x92\xdc\x6c\x0e\xf7\x9b\x1a\xcd\x90\xfe\x07\x81\x4d\x6d\xf6\xc5\x0d\xbc" +
	"\x1b\xb2\xe4\x6d\x58\xfb\xe0\x96\x2c\xba\x5b\xdd\x22\xe3\x54\xcc\xc2\x3a\x8d\x3b\x3f\x9d\x4d\x10\x4b\x6a\xe8\xd4" +
	"\x44\xce\xc8\x6c\x49\x76\x41\x8f\xf3\xa6\x7a\x55\xb8\x3e\xe6\x7e\xba\x12\xff\x91\x9b\x01\xd5\xfc\x7c\xef\x1d\xca" +
	"\xf9\x9c\xcf\x1f\xd0\xa6\x43\x0b\x9e\x0e\xec\xf7\x4c\xe3\x21\xfe\xcf\xed\x5f\x39\xdb\x23\x7b\xc1\x72\x15\x75\xc2" +
	"\xc5\xfb\x42\x92\x1d\xb2\x4e\xe1\xa0\x41\x38\x8d\xbb\x03\x86\xc8\xd9\x75\xb7\x75\x34\x1a\xc3\x9b\x5a\xff\x2a\x4b" +
	"\x2a\x92\x34\x7f\xb5\xbf\x24\xd9\xf3\x12\x93\xcf\xb6\x80\xd1\x50\xff\x8f\xb3\x7f\x0d\xdd\x9a\x2b\x80\xb1\x8f\xc9" +
	"\x98\xa1\x28\xe0\x20\x79\x09\xdb\xc9\x15\xa7\x8a\x9c\x6a\xf2\xb0\x9d\x1e\xbe\x98\x77\xd7\x10\x16\xef\xcc\x48\xd4" +
	"\x15\x11\xcf\x7b\x3b\x22\xf9\xaa\x98\x50\x9c\x71\xfd\x8c\xf9\x88\x3e\x4f\xb9\xed\x1d\x17\xbb\x2e\xaf\x2a\x7f\xf5" +
	"\x43\xfb\xe5\x55\x35\x18\x1e\xee\x96\x57\xc1\xc7\xb8\x46\x51\x8c\x1f\x34\xcb\xb7\xf1\xce\x25\x49\x61\x73\xe9\xf1" +
	"\xfc\x06\xee\x87\x97\x31\xea\x5e\xbe\x65\x4d\xb2\x39\x24\xdf\x17\x17\x92\x9c\x7c\x09\x9d\xfa\xcd\xcb\x61\x29\xe8" +
	"\xd3\x9c\x51\x21\x88\xd9\x73\x6b\xe6\x7f\x02\x00\x00\xff\xff\x13\x7e\x8c\xc4\x25\x0a\x00\x00")

func frontendAssetsApplicationJsBytes() ([]byte, error) {
	return bindataRead(
		_frontendAssetsApplicationJs,
		"frontend/assets/application.js",
	)
}

func frontendAssetsApplicationJs() (*asset, error) {
	bytes, err := frontendAssetsApplicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/assets/application.js", size: 2597, md5checksum: "", mode: os.FileMode(436), modTime: time.Unix(1506096158, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendIndexHtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x38\xfd\x6e\xdc\xb8\xf1\xff\xe7\x29\x26\x0a\x7e\xc8\x5d\x10\x49\xb1" +
	"\x9d\xfb\x35\x75\xb4\x2e\xdc\xc4\xbd\xec\x21\x77\xc9\x9d\x73\x68\x83\xc3\xfd\x31\x12\x47\x12\x6d\x8a\x54\xf8\xb1" +
	"\xeb\x6d\xd0\xe7\xe8\x03\xf5\xc5\x0a\x52\xd2\xae\x76\x57\xeb\xd8\x6d\x50\x04\xf1\x8a\xc3\xe1\x7c\x71\x3e\x99\x3d" +
	"\x7c\xfd\xee\xd5\x87\x8f\xef\x2f\xa0\xb6\x8d\x38\x7b\x90\xf9\x1f\x10\x28\xab\x59\x44\x32\x3a\x7b\x00\x90\xd5\x84" +
	"\xcc\x7f\x00\x64\x0d\x59\x84\xa2\x46\x6d\xc8\xce\x22\x67\xcb\xf8\x45\x34\xde\xaa\xad\x6d\x63\xfa\xe4\xf8\x62\x16" +
	"\xfd\x2d\xfe\xf5\x3c\x7e\xa5\x9a\x16\x2d\xcf\x05\x45\x50\x28\x69\x49\xda\x59\x34\xbf\x98\x11\xab\x68\xeb\xa4\xc4" +
	"\x86\x66\xd1\x82\xd3\xb2\x55\xda\x8e\x90\x97\x9c\xd9\x7a\xc6\x68\xc1\x0b\x8a\xc3\xe2\x29\x70\xc9\x2d\x47\x11\x9b" +
	"\x02\x05\xcd\x8e\x9e\x42\x83\x37\xbc\x71\xcd\x06\xe0\x0c\xe9\xb0\xc2\x5c\xd0\x4c\xaa\x81\xd7\xc3\x38\x86\x0f\x35" +
	"\x01\xe6\x6a\x41\x70\x02\x81\xb7\xc5\xca\xc0\x93\xc6\x19\xfb\x04\x0a\xd5\x10\x94\x5c\x1b\x0b\x5c\x82\xad\x09\xbc" +
	"\xfa\x2f\x01\xe5\x0a\x94\xad\x49\x87\xf5\x20\x1e\xf8\x43\xdd\x99\x27\x58\x5a\xd2\x4f\xfc\x11\x43\x1d\xc9\x38\xee" +
	"\xb9\x5a\x6e\x05\x9d\x5d\x52\xe1\x34\xc1\x7b\x34\x66\xa9\x34\xcb\xd2\x0e\xfc\x60\x23\xd9\x9f\x95\xb2\xc6\x6a\x6c" +
	"\x37\x47\x05\x97\xd7\xa0\x49\xcc\x22\x63\x57\x82\x4c\x4d\x64\x23\xa8\x35\x95\xb3\xc8\x5b\xdb\x9c\xa6\x69\x83\x37" +
	"\x05\x93\x49\x3e\x9c\xf6\x8b\x42\x35\xe9\x1a\x90\x9e\x24\x27\xc9\xf3\xb4\x30\x66\x03\x4b\x1a\x2e\x93\xc2\x98\xe8" +
	"\x1e\x8c\xc2\xe1\x25\xda\xa2\x0e\xf4\x5b\x6c\x49\x4f\x52\xdc\xa8\xf4\xe6\xc3\x8f\x6f\xbf\x03\x53\xf3\x06\x50\x32" +
	"\xf8\x85\x4c\xab\x24\x4b\xae\x0c\x94\x4a\xc3\xfc\xe2\x05\x18\xd7\xfa\x2b\x07\x55\xf6\xc8\x24\xa8\x21\x69\x4d\x38" +
	"\xd0\x10\xe3\x08\x9f\x1c\x69\x4e\x23\x8b\x7a\xd2\x7f\x3d\xff\xe5\xa7\xf9\x4f\xdf\x9f\x8e\x89\x32\x45\x46\x3e\xb6" +
	"\xb0\x54\xfa\x1a\x78\x09\x2b\xe5\xc0\x3b\x55\xb8\xc9\x16\x2b\x82\x05\x47\x28\xb9\xa0\xd3\x34\xdd\x22\xf7\x1b\x2f" +
	"\x41\x58\x98\x5f\xc0\x1f\x7f\xef\xa0\x00\x99\x29\x34\x6f\x2d\x18\x5d\x6c\x8c\xa0\x8c\x49\x7a\x8b\x7b\x23\xf8\x80" +
	"\xf9\xce\xd4\x7c\x91\x9e\x24\x7f\x48\x8e\x37\xeb\x60\x8e\x2b\x13\x9d\x65\x69\x47\xe6\x3e\x54\x75\xa7\x52\x7a\x94" +
	"\x3c\x4f\x8e\x87\xd5\x01\x8a\xd9\xc3\xdf\x48\x32\x5e\xfe\xbe\x56\x27\xdc\xe0\xc0\x2e\x57\x6c\x05\x9f\x21\xc7\xe2" +
	"\xba\xd2\xca\x49\x16\x17\x4a\x28\x7d\x0a\x8f\xe8\xd8\xff\x7b\x09\xff\xe8\x31\x93\x65\xcd\x2d\x4d\xe3\x96\x65\x39" +
	"\x42\x2c\x48\x5a\xd2\xf0\x19\x2c\xdd\xd8\x18\x05\xaf\xe4\x29\x74\xc0\x11\x56\x89\x9f\xe0\x33\x34\xa8\x2b\x2e\x63" +
	"\xab\xda\x53\x38\xa1\x66\xb4\xdf\x6a\x55\x69\x32\x66\x83\x94\x2b\x6b\x55\x73\x0a\xcf\xda\x9b\x11\xde\x95\x6b\x72" +
	"\x65\xb5\x92\xd0\x4e\xa0\x0e\x88\x59\xba\x56\x3b\x4b\x87\x9c\x95\x79\xed\x7b\xab\x48\x5c\x40\x21\xd0\x98\x59\x24" +
	"\x71\x91\xa3\x86\xee\x27\x66\x54\xa2\x13\x36\x5a\x5f\x10\xe3\x6b\x4c\x1f\xe8\xc8\x25\xe9\xb8\x14\x8e\xb3\x35\xce" +
	"\x10\xb1\xda\x3b\xa9\xff\x6f\x55\x55\x09\x82\x8a\x2c\x78\xd3\xb5\xc4\x82\x87\xe7\x64\xbd\xa5\x1a\x95\x73\x41\xc0" +
	"\xb8\x69\x05\xae\xd6\x8e\xb7\xcb\xad\x17\xc8\x4b\x4f\x7a\xc4\xcb\x2b\xe2\xac\x55\x12\xec\xaa\xa5\x59\xd4\x2d\xa2" +
	"\x9d\x63\x9d\x08\x11\x30\xb4\xd8\x2f\x66\x51\xa3\x18\x8a\x01\x86\xba\xf2\x89\xfb\x91\x21\x6b\xb9\xac\xcc\x8f\x61" +
	"\x73\xcc\xc7\x7b\x4f\x8b\x72\xa0\x5c\x89\x55\x5b\xf3\x42\x49\x58\x7f\xc5\x85\xaa\x22\x40\xcd\x31\xae\x39\x63\x24" +
	"\x67\x91\xd5\x8e\x82\x57\xb6\x28\xb7\x84\x4e\x3b\x41\xb7\x60\xb8\x23\x75\xee\x4d\x38\x64\x9a\x47\xd1\x7e\x9a\xc4" +
	"\x91\xad\x52\xc6\x17\xd3\xa6\x2b\x94\x10\xd8\x1a\x1a\x2e\x75\x58\x47\xc0\xd9\x2c\xca\x4d\x4c\x37\xd8\xb4\x82\xe2" +
	"\x9d\xfd\xf8\x68\xdb\xce\x4e\x8c\xe4\x1b\x88\x49\x5c\xec\x5a\x49\xf0\xb3\x0c\x77\xf2\x63\xc5\x6d\xed\xf2\x10\xc0" +
	"\x6f\xdd\xdf\x79\x49\x3a\x6d\x7b\x35\x1e\x2d\x38\xc6\x28\x4a\x4d\x6c\x87\x12\xc0\x79\x00\xc3\xc5\x8d\x25\x69\xb8" +
	"\x92\x5e\xe5\x2c\x15\xfc\x6b\x70\x6c\xf9\x3e\xbb\xf7\x73\x78\xad\x0a\xe7\x93\x2c\xda\x03\xfc\xb2\xd4\x89\x3b\xd9" +
	"\x65\xf8\xd4\xbc\xaa\xed\x84\x91\x76\x98\xdf\xea\xc7\xb9\x95\x90\x5b\x39\x04\xe4\x40\x3a\xb7\xf2\xbf\x75\xea\xaf" +
	"\xe1\xd8\x70\xd9\x33\xd8\x55\x69\xc2\xcb\x3d\xf4\x36\x83\x6e\x39\xf2\x68\x91\xa5\x12\x17\xe3\x63\x1d\x74\x2a\x21" +
	"\x4d\xa6\x2b\xad\x96\xd1\xc1\xf8\x88\x6f\x4c\x7c\x74\x0c\xfe\xcb\x34\xf1\x8b\xe1\x43\x95\xa5\x21\x1b\x77\x1b\x0d" +
	"\x8b\xff\x7f\xf8\xe8\x37\x4e\x86\x82\xbe\x4f\x74\x9d\x99\x77\x2f\xbe\x5d\xb3\x0d\x45\x61\xef\x36\xe6\xb0\xe4\x42" +
	"\x40\x45\x92\x34\x5a\x02\x04\x49\x4b\x30\x5d\xe8\x0f\x1e\x0c\xb4\x20\xbd\x82\x93\x67\x7e\x43\x49\x66\x12\xf8\x21" +
	"\xf4\x5b\x82\x17\xd7\x7d\x45\xef\x31\xad\x82\x6b\xa2\x36\x00\x0b\xa7\xb5\xef\xcd\x94\xa4\x04\x76\xee\xa4\xdd\xbe" +
	"\x92\x60\xf7\x03\xba\xb5\x28\x49\x40\xf8\xbb\x57\x21\x0e\x60\x87\xc4\xcd\x65\xb5\xa7\xee\x47\xe5\xf4\x5a\xd8\x1d" +
	"\x91\xb6\x32\xda\x34\x59\x5f\xc4\xf6\x68\x8e\xd1\x4a\xa5\x9b\x38\x94\x9d\x29\xbf\xe7\xb2\x75\x76\x0b\xd5\x3b\x91" +
	"\x56\xa2\x2f\xd9\x5d\x8a\x2c\x55\xe1\x0c\xb1\xb9\x47\x8e\xfa\xf8\xf4\xe5\x3d\x82\x05\x0a\x47\xb3\x28\x49\x92\x7d" +
	"\x21\x26\xc4\xbf\x8b\x46\xa5\x52\x53\x6e\xb1\x85\xd8\x77\x07\x53\x1a\x4d\xa0\xc5\x39\xea\x08\x42\x0b\xd0\x0f\x0d" +
	"\xa7\x70\xf4\xec\xd9\xff\xbd\xf4\xf1\xbb\x27\xd1\xdd\x24\xff\xdf\x39\xc8\x5f\xce\x7f\xfe\x5a\x6e\xb1\x9d\xb7\x7b" +
	"\xa0\xaf\x1d\xc6\x07\x6a\x75\xf6\x5a\x85\xae\xd8\x58\xa5\x09\x9a\xd5\xda\x2d\xff\xe4\x1b\xa8\x80\x91\xe5\x7a\x9f" +
	"\xc4\x47\xe5\x80\x51\xc1\x19\xc1\xb2\xe6\x45\xed\xc3\xcb\x87\x9d\xc5\x6b\x0a\x0d\xd0\x92\xba\x98\x96\xca\xf6\xc4" +
	"\xc3\xcc\x54\x86\x98\x1c\x02\x9d\xad\xd9\x99\x04\x3e\xd4\x68\x61\x89\xab\x20\x4f\x81\x12\x72\x02\xe3\x13\x80\x92" +
	"\xa2\x03\x5e\x4b\xb5\xec\xd9\xad\x43\x3d\x20\xd7\xca\x50\xb2\xaf\xe6\x5e\xd1\xdc\x55\xfe\x8d\x5a\x67\x19\xd4\xd4" +
	"\x0f\x6b\x6b\x91\xbe\x60\x82\x73\x21\x36\xb8\xe1\x7c\x51\x53\x71\x4d\x0c\xb0\x42\x2e\x8d\x05\x04\x43\x61\x92\xd1" +
	"\x4e\x90\xf1\xe6\x21\x19\x34\xb2\x35\xad\xc2\x70\x12\xcc\xd3\xe7\x70\x68\xd1\x37\x87\xd2\xf4\x2a\x2e\x95\x13\x0c" +
	"\x1a\x6f\x50\x6e\x81\xd0\xac\x42\x0b\x19\x3c\x1c\x9b\x40\xae\x72\xbe\x5f\x1e\xa7\xbe\xff\xc4\x0a\xaf\x50\xc2\x1c" +
	"\xb4\x1f\x64\x3d\x29\xa3\x9c\x2e\x08\x0a\xc5\xe8\x0b\x16\x78\x57\x42\xa1\x9c\x36\x34\x5c\x59\x02\x73\xfb\xd8\x40" +
	"\xeb\x72\xc1\x4d\x4d\x0c\x94\x84\xfb\x34\x29\xd1\xd9\xf7\xdc\xbe\x71\xb9\x6f\x41\x7c\x0b\x4d\x61\xc4\x5e\x72\x5b" +
	"\x03\x82\x25\x63\xc1\x38\x3f\x93\x6c\x59\x72\xe7\x12\x0c\x96\x77\xf4\x85\xdd\xa6\xe6\x0e\x21\x7f\xb8\x50\x6f\xf0" +
	"\xc6\x91\xd9\x77\x26\x3e\xa1\x4e\xf7\x23\x7b\xc8\x31\xe3\x28\x54\x75\xa0\x6c\x77\x28\xfd\x73\xc3\x76\xa7\xba\x87" +
	"\x35\x31\x36\x7c\xa1\xe1\x2a\x84\x32\xc3\xc0\xc0\xb8\x69\xf8\x48\x85\x89\x46\xe8\x5f\xff\x3c\xd0\xeb\xd4\xcf\xb7" +
	"\x25\x09\x2f\x1b\xbe\x95\xef\x2c\x90\xa5\xf5\xf3\x09\x23\xdf\xa6\xcb\x44\x6e\xbb\x63\xc1\xcb\x04\xe6\x24\x7c\xe4" +
	"\xf8\x3c\xd9\x39\xca\x5b\x92\x95\xad\xdf\xb5\xbe\xdb\x8d\xc6\x9d\x94\x56\x22\x0e\xf8\xd1\xd9\x30\x70\x80\x08\xc8" +
	"\xa7\x59\x1a\x36\xf6\xc8\x77\xd5\xb4\x33\xa7\x74\x4d\xee\xeb\xe7\x44\x6d\x5d\x97\xcd\xe3\x67\x9d\x3b\x4c\xca\x72" +
	"\xaf\xd2\xf9\x45\xa5\x0f\xd6\xfe\x4e\xda\x90\xad\x72\x75\xd3\xc9\xe3\x0c\x5d\xb6\x54\x70\x14\x83\x2c\xf0\xab\x21" +
	"\x30\x1d\x2c\xbc\xf2\x61\x61\x49\xef\xb7\xbb\x13\xbc\x0e\xc5\xd1\x6d\x57\x3c\xd9\x03\xdc\x67\x3e\x98\x76\xdc\xb3" +
	"\x57\xde\xa9\x0f\x38\xea\x5d\xa8\xb7\x9a\x37\xa8\x57\x9d\x95\x54\xb0\xcd\x25\x2e\xbc\x3b\xe3\xc2\xa7\x7c\x94\x15" +
	"\x99\xc9\xd1\x76\x67\x3a\xbd\x4b\xea\x78\x18\xc7\x70\xf5\xb3\xf3\x7d\xee\x37\x92\x0a\x32\x06\x75\x97\xf6\xd7\x8f" +
	"\x81\x8f\x0d\xfc\x80\x0b\xbc\xec\x5e\x8d\x5a\xe1\x2a\x2e\xcd\xb7\x9b\xc7\xab\xa9\xe7\x24\xbc\xc2\x9b\xa4\x52\xaa" +
	"\x12\x84\x2d\x37\x21\xf7\x7a\x58\x2a\x78\x6e\xd2\xab\x4f\x9e\x61\x7a\x94\x1c\x1d\x25\xc7\xfd\xea\xe0\xe3\x52\x1c" +
	"\xc3\x5c\x16\xc2\x31\x02\x14\x02\x0a\xd5\xb4\x5c\xf8\x42\xde\x09\x02\xdf\xe4\x24\xd4\xf2\xdb\xa7\xa0\x34\xf0\x1e" +
	"\x91\x4b\xc6\x17\x9c\x39\x14\xe1\xad\xcd\x00\x1a\x90\x44\x8c\xd8\xed\x62\xdf\xf5\x25\xf3\x6a\xf7\x21\x73\x42\xf0" +
	"\x31\x7d\x34\x86\xac\x49\xb1\x6d\x05\x2f\xc2\xcc\xbb\x77\x22\x4b\xbb\xa7\xa2\x2c\xed\x5e\xc2\xff\x1d\x00\x00\xff" +
	"\xff\x75\x2d\x32\xd0\x1a\x17\x00\x00")

func frontendIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_frontendIndexHtml,
		"frontend/index.html",
	)
}

func frontendIndexHtml() (*asset, error) {
	bytes, err := frontendIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/index.html", size: 5914, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1506096152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"frontend/assets/application.coffee": frontendAssetsApplicationCoffee,
	"frontend/assets/application.js":     frontendAssetsApplicationJs,
	"frontend/index.html":                frontendIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"frontend": {nil, map[string]*bintree{
		"assets": {nil, map[string]*bintree{
			"application.coffee": {frontendAssetsApplicationCoffee, map[string]*bintree{}},
			"application.js": {frontendAssetsApplicationJs, map[string]*bintree{}},
		}},
		"index.html": {frontendIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
