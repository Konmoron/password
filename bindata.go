// Code generated by go-bindata.
// sources:
// frontend/assets/application.coffee
// frontend/assets/application.js
// frontend/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _frontendAssetsApplicationCoffee = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x6e\xdb\x38\x10\xbd\xf3\x2b\x06\x8e\x77\x25\x2d\x6c\x45\xc9" +
	"\xde\x02\x28\xbd\xf4\x92\x22\x6d\x82\xba\xb7\xa2\x07\x46\x1c\xc9\x84\x69\x52\x20\x29\x0b\x41\x90\x7f\x2f\x48\x51" +
	"\x96\x14\xcb\x49\x7b\x12\xc8\x79\xef\xcd\xf0\xcd\x90\xe2\x25\xb4\x5c\x32\xd5\xa6\x1b\xab\x34\xad\x10\xa8\x64\xfd" +
	"\xd6\x97\xcd\xc3\x37\x02\xfd\x6a\x69\x02\x22\x87\x78\x87\xcf\x09\xac\x6f\x09\x00\x80\x41\x7b\x03\xf1\x81\x8a\x06" +
	"\x8f\x7b\x00\x42\x15\x54\x04\xcd\xd4\xa0\xbd\xb3\xb8\x77\xb4\x15\x38\xd5\xd4\x58\xcd\x65\xc5\xcb\xe7\x40\x4c\x3c" +
	"\xad\x72\x52\x47\x09\x6e\x71\x0f\xf9\x54\xa9\x1a\x94\x92\x00\xf3\x7a\x35\xd5\x06\x63\xc7\x48\x80\x97\x9e\x4a\xc8" +
	"\xb2\xd3\x0a\xf5\x0b\x6a\xec\xbd\xa2\x0c\x72\x90\xaa\x8d\x93\x21\xa2\xb1\xd4\x68\xb6\x8f\xd4\x98\x56\x69\x07\xf8" +
	"\x3f\xcb\xb2\x6c\x00\x58\x5e\xec\x50\xdf\x49\x8b\xfa\x40\x05\xe4\x70\x9d\x65\xe4\x6d\x18\x72\x67\xc5\x11\xe4\x36" +
	"\x57\xf3\x02\x04\x60\x19\x47\x17\xa5\x2a\x1a\x83\xec\x4e\xd6\x8d\x8d\x92\xf4\x89\x4b\x06\x51\x21\x78\xb1\x8b\x56" +
	"\x60\xac\xaa\xbf\x77\x75\xbd\x07\x7f\x12\x8d\x8e\x56\xa0\xd1\x58\xaa\xed\x94\xa0\x6a\xcb\x95\xdc\xd0\x03\x9e\xaa" +
	"\xd3\x03\x3e\xf8\xb0\x71\xe7\x10\x8a\xb2\xb0\xf4\xbe\xb8\x75\xef\x46\x9c\x10\x22\x55\xeb\xba\x1e\xda\xeb\x1d\xc4" +
	"\x16\x3e\x53\x8b\x1e\xce\x5c\x5b\x7e\xf0\xbd\x5b\x91\x51\xe1\x23\x4e\x21\x90\x1e\xcf\x1f\x4f\x5c\x49\xe6\xcf\x67" +
	"\x50\x60\x61\xbd\x7e\x49\x85\x41\x42\xa6\x87\x1c\x89\x7f\xd8\xe0\xbf\x6e\x10\x31\x68\x1f\xb5\xaa\x34\x1a\xe3\x12" +
	"\xd5\xa8\x8b\x90\x6c\x19\x47\x69\x1d\x42\xeb\x27\xaa\xa3\x24\x2d\x8c\x89\xa3\x96\x33\xbb\x8d\x56\xb0\xb8\x78\x71" +
	"\xe8\xd7\x7f\x16\x09\x21\x63\x23\x47\x05\x77\x9d\x31\x7e\xb8\xa7\xce\x2f\x9d\x95\xb0\xb8\x3c\x5c\x5d\x56\x68\x7b" +
	"\xea\x27\x81\xb2\xb2\xdb\xfc\xe2\x25\x30\xd3\x3a\x44\xee\x7d\xe0\xf5\x5f\x53\x63\xc1\xa9\x18\x21\x1a\x83\x9b\x6e" +
	"\xf3\x75\xb1\x82\x98\x51\x4b\x8f\xd7\x73\xc6\x6e\xd7\x16\x8f\xf1\x80\x73\x8e\x92\xd1\xe0\xcc\x9d\xc7\x93\xa7\xb5" +
	"\xdd\xf8\x6c\xd3\xbd\x4e\x21\x64\xed\x32\x0e\xe5\x76\x84\x61\xdd\x83\x7f\x66\xbf\xd2\x62\x8b\xc5\x0e\x19\x39\x7d" +
	"\x95\xe2\x68\x83\x45\xa3\xb1\xb7\x2c\x14\xe9\x07\xc9\xc6\xa1\xc0\x7e\xd4\x0c\x5a\xcb\x65\x65\xbe\x2a\x46\x45\x94" +
	"\xa4\x7b\xf7\x8d\xa3\x2d\x67\x18\xcd\xcd\xff\xa8\x4b\xb3\x5d\xfc\xe3\x5a\x2a\xec\x26\x9a\x97\x03\x3b\x87\x46\x32" +
	"\x2c\xb9\x44\xe6\x9d\x98\x9a\x79\x6a\xe7\x75\x16\x02\x63\xcb\xba\x2b\x02\x1f\x79\x3d\x3f\x3e\xbd\x2d\xef\x7a\x0e" +
	"\x39\x9c\x8e\xd6\xe0\x02\x21\xee\x0a\x8d\x5f\x09\x5e\x96\xfd\xdc\xc0\xfa\xed\x44\x11\x00\x77\x4b\x1c\xfe\xcc\x23" +
	"\xbc\xf6\x0a\x09\x5c\x9e\x7b\xa5\xff\x83\x2b\xff\x46\x8f\xaf\xaa\xd3\xec\xec\xf5\xe9\x6f\xf3\x33\x64\xd2\xfd\xa2" +
	"\x26\x5d\xfe\x1d\x00\x00\xff\xff\x19\x94\x55\x68\x0b\x07\x00\x00")

func frontendAssetsApplicationCoffeeBytes() ([]byte, error) {
	return bindataRead(
		_frontendAssetsApplicationCoffee,
		"frontend/assets/application.coffee",
	)
}

func frontendAssetsApplicationCoffee() (*asset, error) {
	bytes, err := frontendAssetsApplicationCoffeeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/assets/application.coffee", size: 1803, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1431268437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendAssetsApplicationJs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x8f\xe4\x34\x10\xbd\xf7\xaf\x28\x0d\xcd\xc4\x61\x33\xe9\x9e" +
	"\x81\xd3\x8e\x02\x07\x90\xd0\xa0\x85\x5d\xd1\xdc\x10\x07\x8f\x53\x49\x5b\xe3\x89\x23\xdb\xe9\xd6\x08\xe5\xbf\x23" +
	"\x7f\x24\x71\xd2\x1f\x0b\xec\xa9\xdb\x76\xb9\xea\xf9\xbd\xe7\x72\x36\x1b\xf8\x19\x1b\x54\xd4\x60\x09\xcf\x6f\xf0" +
	"\xa3\xac\x2a\xc4\x1d\x53\xbc\x35\x70\x9f\xdf\x3f\xe4\xdf\xad\x48\xd5\x35\xcc\x70\xd9\x90\x14\xfe\x5e\x01\x1c\xa8" +
	"\x02\x21\x69\xf9\xb1\xb5\x93\x3a\x73\x83\x4f\x54\xeb\xa3\x54\x65\x06\x8d\x3c\x66\xa0\x50\x1b\xaa\xcc\xef\x58\x29" +
	"\xd4\xfb\x0c\x34\x3d\xe0\x18\xaf\xd1\x7c\x52\xb2\x56\xa8\xed\xc0\xc8\x76\x0c\x33\x9c\xbd\x3c\xae\x56\x00\xbc\x02" +
	"\x72\xe4\x4d\x29\x8f\xf9\xce\x48\x45\x6b\x84\xdb\x5b\x08\x33\xbf\xec\x3e\xfe\xe6\xa1\xc0\x30\xb5\xd6\x21\xaa\x80" +
	"\x11\xed\x0b\xbe\x0d\x51\x00\x0a\x4d\xa7\x9a\x71\x08\x16\xc4\xfb\x29\xf6\x40\x45\x87\x69\xb4\x3c\xee\x10\x92\x51" +
	"\x11\x30\xe4\x1a\xcd\x93\xc1\x57\x9b\x3a\x03\x0b\x23\xd7\x46\xf1\xa6\xe6\xd5\x5b\x48\x91\x3e\x8e\x29\xfa\x6c\xfc" +
	"\x5b\xcf\x8a\xcd\xeb\x58\x3a\xb9\xc1\xd7\xc7\x68\xce\x8e\xa1\x98\xd7\xae\xa7\xda\xe9\x2c\xb6\x02\x62\xe3\xe7\x59" +
	"\x47\xfc\x0e\x65\x4b\x95\x46\x1f\x15\x6f\xed\x57\xcb\x7f\xbd\x5f\x76\x3f\xbd\x15\x62\xbd\x54\x7f\xa4\x5c\x50\x6d" +
	"\x3e\x48\x5a\x42\x61\x25\x27\x21\x71\x58\x54\x5e\xd1\xc1\x15\x50\xc0\xb7\xdb\xed\x76\x3b\x8b\xb1\x62\xa3\x7a\x6a" +
	"\x0c\xaa\x03\x15\x50\xc0\xc3\xd9\x00\x28\xac\x56\x43\x18\xb1\x93\xd9\xf9\x14\x01\xc2\x9a\x24\x5f\x55\x92\x75\x1a" +
	"\xcb\xa7\xa6\xed\x4c\x92\xe6\xcf\xbc\x29\x49\xc2\x04\x67\x2f\xc9\xcc\x72\x9f\xdb\xf2\x2c\x3a\x95\x2c\xed\x1c\x6d" +
	"\x92\xce\xd3\x3b\x7a\xc0\xd3\x2a\x93\xe5\xc3\x86\xe8\xd2\x0c\x74\x8d\x26\x9b\x6e\x90\x5f\xea\x53\x77\x0f\x1a\x79" +
	"\x8c\x2d\x3d\x48\x60\x3d\x53\xfa\x0c\x8e\x7f\x3c\xc2\x4f\xd4\xe0\x22\x6b\x69\x3d\xf3\x07\x7f\x0d\xf3\xbd\xcb\x18" +
	"\x1d\xfe\x5c\x66\x26\x90\x8e\x84\x92\x19\xcd\x97\xb9\xd2\x28\x90\x99\x45\xf5\x8a\x0a\x8d\x53\xdd\x39\x85\xe7\x4a" +
	"\x5f\xf5\x55\x48\xfa\x25\xce\x08\xe7\x9f\x9a\x4f\x0c\xa2\x45\xc5\x06\x20\xa1\xd6\x9a\x24\x79\x1b\x42\xef\x9e\xa9" +
	"\x4a\xd2\x9c\x69\x4d\x92\x23\x2f\xcd\x3e\xc9\xc0\x6e\x81\x77\x70\xf3\xf5\x4d\x94\x3e\x56\xf2\x92\x72\xde\x34\xda" +
	"\x1f\x2c\x0c\xdc\x6d\xbf\x64\x8f\xb5\x15\x92\xdc\x6c\x0e\xf7\x9b\x1a\xcd\x90\xfe\x07\x81\x4d\x6d\xf6\xc5\x0d\xbc" +
	"\x1b\xb2\xe4\x6d\x58\xfb\xe0\x96\x2c\xba\x5b\xdd\x22\xe3\x54\xcc\xc2\x3a\x8d\x3b\x3f\x9d\x4d\x10\x4b\x6a\xe8\xd4" +
	"\x44\xce\xc8\x6c\x49\x76\x41\x8f\xf3\xa6\x7a\x55\xb8\x3e\xe6\x7e\xba\x12\xff\x91\x9b\x01\xd5\xfc\x7c\xef\x1d\xca" +
	"\xf9\x9c\xcf\x1f\xd0\xa6\x43\x0b\x9e\x0e\xec\xf7\x4c\xe3\x21\xfe\xcf\xed\x5f\x39\xdb\x23\x7b\xc1\x72\x15\x75\xc2" +
	"\xc5\xfb\x42\x92\x1d\xb2\x4e\xe1\xa0\x41\x38\x8d\xbb\x03\x86\xc8\xd9\x75\xb7\x75\x34\x1a\xc3\x9b\x5a\xff\x2a\x4b" +
	"\x2a\x92\x34\x7f\xb5\xbf\x24\xd9\xf3\x12\x93\xcf\xb6\x80\xd1\x50\xff\x8f\xb3\x7f\x0d\xdd\x9a\x2b\x80\xb1\x8f\xc9" +
	"\x98\xa1\x28\xe0\x20\x79\x09\xdb\xc9\x15\xa7\x8a\x9c\x6a\xf2\xb0\x9d\x1e\xbe\x98\x77\xd7\x10\x16\xef\xcc\x48\xd4" +
	"\x15\x11\xcf\x7b\x3b\x22\xf9\xaa\x98\x50\x9c\x71\xfd\x8c\xf9\x88\x3e\x4f\xb9\xed\x1d\x17\xbb\x2e\xaf\x2a\x7f\xf5" +
	"\x43\xfb\xe5\x55\x35\x18\x1e\xee\x96\x57\xc1\xc7\xb8\x46\x51\x8c\x1f\x34\xcb\xb7\xf1\xce\x25\x49\x61\x73\xe9\xf1" +
	"\xfc\x06\xee\x87\x97\x31\xea\x5e\xbe\x65\x4d\xb2\x39\x24\xdf\x17\x17\x92\x9c\x7c\x09\x9d\xfa\xcd\xcb\x61\x29\xe8" +
	"\xd3\x9c\x51\x21\x88\xd9\x73\x6b\xe6\x7f\x02\x00\x00\xff\xff\x13\x7e\x8c\xc4\x25\x0a\x00\x00")

func frontendAssetsApplicationJsBytes() ([]byte, error) {
	return bindataRead(
		_frontendAssetsApplicationJs,
		"frontend/assets/application.js",
	)
}

func frontendAssetsApplicationJs() (*asset, error) {
	bytes, err := frontendAssetsApplicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/assets/application.js", size: 2597, md5checksum: "", mode: os.FileMode(436), modTime: time.Unix(1506092886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontendIndexHtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xfd\x92\xd4\x36\x12\xff\x9f\xa7\x68\x4c\x5d\x91\x50\xd8\x66\x77" +
	"\xc9\x1d\xb7\x78\x36\xc5\x01\x07\x93\x22\x81\x04\x52\x77\x54\x2a\x7f\xb4\xad\xb6\xad\x5d\x59\x32\x6a\x79\x66\xe7" +
	"\xa8\x7b\x8e\x7b\xa0\x7b\xb1\x2b\xc9\xf6\x7c\x7a\x60\xc9\xa5\x52\x14\x3b\x96\xd4\xea\x8f\x9f\xfa\x4b\xca\x6e\x3f" +
	"\x7b\xfd\xf4\xdd\xfb\x37\xcf\xa1\x76\x8d\xba\xb8\x95\xf9\x1f\x50\xa8\xab\x59\x44\x3a\xba\xb8\x05\x90\xd5\x84\xc2" +
	"\x7f\x00\x64\x0d\x39\x84\xa2\x46\xcb\xe4\x66\x51\xe7\xca\xf8\x51\xb4\xbd\x54\x3b\xd7\xc6\xf4\xa1\x93\x8b\x59\xf4" +
	"\xcf\xf8\xe7\x27\xf1\x53\xd3\xb4\xe8\x64\xae\x28\x82\xc2\x68\x47\xda\xcd\xa2\xf9\xf3\x19\x89\x8a\x76\x76\x6a\x6c" +
	"\x68\x16\x2d\x24\x2d\x5b\x63\xdd\x16\xf1\x52\x0a\x57\xcf\x04\x2d\x64\x41\x71\x18\xdc\x07\xa9\xa5\x93\xa8\x62\x2e" +
	"\x50\xd1\xec\xe4\x3e\x34\x78\x2d\x9b\xae\xd9\x4c\x74\x4c\x36\x8c\x30\x57\x34\xd3\x66\x94\x75\x3b\x8e\xe1\x5d\x4d" +
	"\x80\xb9\x59\x10\x9c\x41\x90\xed\xb0\x62\xb8\xd7\x74\xec\xee\x41\x61\x1a\x82\x52\x5a\x76\x20\x35\xb8\x9a\xc0\x9b" +
	"\xff\x18\x50\xaf\xc0\xb8\x9a\x6c\x18\x8f\xea\x81\xdf\xd4\xef\xb9\x87\xa5\x23\x7b\xcf\x6f\x61\xea\x59\xc6\xf1\x20" +
	"\xd5\x49\xa7\xe8\xe2\x2d\x15\x9d\x25\x78\x83\xcc\x4b\x63\x45\x96\xf6\xd3\xb7\x36\x9a\xfd\xcd\x18\xc7\xce\x62\xbb" +
	"\xd9\xaa\xa4\xbe\x02\x4b\x6a\x16\xb1\x5b\x29\xe2\x9a\xc8\x45\x50\x5b\x2a\x67\x91\x47\x9b\xcf\xd3\xb4\xc1\xeb\x42" +
	"\xe8\x24\x1f\x77\xfb\x41\x61\x9a\x74\x3d\x91\x9e\x25\x67\xc9\xc3\xb4\x60\xde\xcc\x25\x8d\xd4\x49\xc1\x1c\x7d\x81" +
	"\xa0\xb0\x79\x89\xae\xa8\x03\xff\x16\x5b\xb2\x93\x1c\x37\x26\xbd\x7c\xf7\xfd\xab\x6f\x80\x6b\xd9\x00\x6a\x01\x3f" +
	"\x11\xb7\x46\x8b\xe4\x92\xa1\x34\x16\xe6\xcf\x1f\x01\x77\xad\x3f\x72\x30\xe5\x40\x4c\x8a\x1a\xd2\x8e\xc3\x86\x86" +
	"\x84\x44\xf8\xd0\x91\x95\xb4\x85\xa8\x67\xfd\x8f\x27\x3f\xfd\x30\xff\xe1\xc5\xf9\x36\x53\x61\x88\xf5\x5d\x07\x4b" +
	"\x63\xaf\x40\x96\xb0\x32\x1d\x78\xa7\x0a\x27\xd9\x62\x45\xb0\x90\x08\xa5\x54\x74\x9e\xa6\x3b\xec\x7e\x91\x25\x28" +
	"\x07\xf3\xe7\xf0\xd7\x5f\xfb\x59\x80\x8c\x0b\x2b\x5b\x07\x6c\x8b\x0d\x08\x86\x39\x19\x10\xf7\x20\xf8\x80\xf9\x86" +
	"\x6b\xb9\x48\xcf\x92\xbf\x24\xa7\x9b\x71\x80\xe3\x92\xa3\x8b\x2c\xed\xd9\x7c\x09\x57\xdb\x9b\x94\x9e\x24\x0f\x93" +
	"\xd3\x71\x74\x84\x63\x76\xfb\x17\xd2\x42\x96\xbf\xae\xcd\x09\x27\x38\x8a\xcb\x8d\x58\xc1\x47\xc8\xb1\xb8\xaa\xac" +
	"\xe9\xb4\x88\x0b\xa3\x8c\x3d\x87\x3b\x74\xea\xff\x3d\x86\x7f\x0f\x94\xc9\xb2\x96\x8e\xa6\x69\xcb\xb2\xdc\x22\x2c" +
	"\x48\x3b\xb2\xf0\x11\x1c\x5d\xbb\x18\x95\xac\xf4\x39\xf4\x93\x5b\x54\x25\x7e\x80\x8f\xd0\xa0\xad\xa4\x8e\x9d\x69" +
	"\xcf\xe1\x8c\x9a\xad\xf5\xd6\x9a\xca\x12\xf3\x86\x28\x37\xce\x99\xe6\x1c\x1e\xb4\xd7\x5b\x74\x97\x5d\x93\x1b\x67" +
	"\x8d\x86\x76\x82\x74\x24\xcc\xd2\xb5\xd9\x59\x3a\xe6\xac\xcc\x5b\x3f\xa0\xa2\x71\x01\x85\x42\xe6\x59\xa4\x71\x91" +
	"\xa3\x85\xfe\x27\x16\x54\x62\xa7\x5c\xb4\x3e\x20\x21\xd7\x94\x3e\xd0\x51\x6a\xb2\x71\xa9\x3a\x29\xd6\x34\x63\xc4" +
	"\x5a\xef\xa4\xfe\xbf\x33\x55\xa5\x08\x2a\x72\xe0\xa1\x6b\x49\x04\x0f\xcf\xc9\x79\xa4\x1a\x93\x4b\x45\x20\x24\xb7" +
	"\x0a\x57\x6b\xc7\xdb\x97\x36\x28\xe4\xb5\x27\xbb\x25\xcb\x1b\xd2\x39\x67\x34\xb8\x55\x4b\xb3\xa8\x1f\x44\x7b\xdb" +
	"\x7a\x15\x22\x10\xe8\x70\x18\xcc\xa2\xc6\x08\x54\xe3\x1c\xda\xca\x27\xee\x3b\x4c\xce\x49\x5d\xf1\xf7\x61\x71\x5b" +
	"\x8e\xf7\x9e\x16\xf5\xc8\xb9\x52\xab\xb6\x96\x85\xd1\xb0\xfe\x8a\x0b\x53\x45\x80\x56\x62\x5c\x4b\x21\x48\xcf\x22" +
	"\x67\x3b\x0a\x5e\xd9\xa2\xde\x51\x3a\xed\x15\xdd\x99\xc3\x3d\xad\x73\x0f\xe1\x98\x69\xee\x44\x87\x69\x12\xb7\xb0" +
	"\x4a\x85\x5c\x4c\x43\x57\x18\xa5\xb0\x65\x1a\x0f\x75\x1c\x47\x20\xc5\x2c\xca\x39\xa6\x6b\x6c\x5a\x45\xf1\xde\x7a" +
	"\x7c\xb2\x8b\x73\xa7\xb6\xf4\x1b\x99\x69\x5c\xec\xa3\xa4\xe4\x45\x86\x7b\xf9\xb1\x92\xae\xee\xf2\x10\xc0\xaf\xba" +
	"\x7f\xc9\x92\x6c\x8a\xaa\xb4\x24\xe2\x76\x29\x2a\xd2\x69\xae\x4c\x9e\x36\xc8\x8e\x6c\x3a\x1a\xf8\x82\x34\x59\x74" +
	"\xc6\x26\x3d\xad\x4f\x5d\xa5\x32\xcb\x6f\x2d\x2e\x67\x3d\xb2\x3b\x92\x01\x9e\x04\x3a\x38\x85\xe7\xd7\x8e\x34\x4b" +
	"\xa3\x3d\x48\x59\xaa\xe4\x6f\xd3\xb1\x1d\x34\xb9\xb3\x90\x18\x63\x2b\x0f\x05\xbe\x99\xc3\x33\x53\x74\x3e\x2d\xa3" +
	"\x3b\x22\x2f\x4b\x3b\x75\x23\x24\xc7\x4f\x2b\xab\xda\x4d\xc0\xba\x27\xfc\x93\x9e\x9f\x3b\x0d\xb9\xd3\x63\x08\x8f" +
	"\xac\x73\xa7\xff\xdf\x30\xf8\x3d\x42\x01\xde\x0e\x02\xf6\x4d\x9a\x88\x0b\x3f\xfb\x29\x40\x77\x5c\x7f\x6b\x90\xa5" +
	"\x1a\x17\xdb\xdb\xfa\xd9\xa9\x14\x36\x99\xe0\xac\x59\x46\x47\x23\x2a\xbe\xe6\xf8\xe4\x14\xfc\x17\x37\xf1\xa3\xf1" +
	"\xc3\x94\x25\x93\x8b\xfb\x85\x46\xc4\x7f\x1e\x3f\x86\x85\xb3\xb1\x05\x38\x64\xba\xce\xe5\xfb\x07\xdf\xae\xc5\x86" +
	"\x32\x72\x70\x1a\x73\x58\x4a\xa5\xa0\xea\xa3\x85\x00\x41\xd3\x12\xb8\x4f\x16\xa3\x07\x03\x2d\xc8\xae\xe0\xec\x81" +
	"\x5f\x30\x5a\x70\x02\xdf\x85\x0e\x4d\xc9\xe2\x6a\xe8\x01\x06\x4a\x67\xe0\x8a\xa8\x0d\x93\x45\x67\xad\xef\xe6\x8c" +
	"\xa6\x04\xf6\xce\xa4\xdd\x3d\x92\x80\xfb\x11\xdb\x5a\xd4\xa4\x20\xfc\x3d\xa8\x29\x47\xa8\x43\xaa\x97\xba\x3a\x30" +
	"\xf7\xbd\xe9\xec\x5a\xd9\x3d\x95\x76\x72\xe0\x34\x5b\x5f\xf6\x0e\x78\x6e\x93\x95\xc6\x36\x71\x28\x54\x53\x7e\x2f" +
	"\x75\xdb\xb9\x1d\x52\xef\x44\xd6\xa8\xa1\xc8\xf7\x49\xb5\x34\x45\xc7\x24\xe6\x9e\x38\x1a\xe2\xd3\x37\x04\x11\x2c" +
	"\x50\x75\x34\x8b\x92\x24\x39\x54\x62\x42\xfd\x9b\x58\x54\x1a\x33\xe5\x16\x3b\x84\x43\x3f\x31\x65\xd1\x04\x59\x9c" +
	"\xa3\x8d\x20\x34\x0d\xc3\x35\xe3\x1c\x4e\x1e\x3c\xf8\xd3\x63\x1f\xbf\x07\x1a\xdd\x4c\xf3\x3f\xce\x41\xfe\xfe\xe4" +
	"\xc7\xdf\xcb\x2d\x76\xf3\xf6\x30\xe9\x6b\x07\xfb\x40\xad\x2e\x9e\x99\xd0\x47\xb3\x33\x96\xa0\x59\xad\xdd\xf2\x5b" +
	"\xdf\x72\x05\x8a\x2c\xb7\x87\x2c\xde\x9b\x0e\x04\x15\x52\x10\x2c\x6b\x59\xd4\x3e\xbc\x7c\xd8\x39\xbc\xa2\xd0\x32" +
	"\x2d\xa9\x8f\x69\x6d\xdc\xc0\x3c\xdc\xb2\xca\x10\x93\x63\xa0\x8b\xb5\x38\x4e\xe0\x5d\x8d\x0e\x96\xb8\x0a\xfa\x14" +
	"\xa8\x21\x27\x60\x9f\x00\x8c\x56\xfd\xe4\x95\x36\xcb\x41\xdc\x3a\xd4\x03\x71\x6d\x98\x92\x43\x33\x0f\x8a\xe6\xbe" +
	"\xf1\x2f\xcd\x3a\xcb\xa0\xa5\xe1\x7a\xb7\x56\xe9\x33\x10\x3c\x51\x6a\x43\x1b\xf6\x17\x35\x15\x57\x24\x00\x2b\x94" +
	"\x9a\x1d\x20\x30\x85\xbb\x8f\xed\x14\xb1\x87\x87\x74\xb0\xc8\xd5\xb4\x0a\xd7\x99\x00\xcf\x90\xc3\xa1\x45\xdf\x4e" +
	"\x6a\x1e\x4c\x5c\x9a\x4e\x09\x68\x3c\xa0\xd2\x01\x21\xaf\x42\xd3\x19\x3c\x1c\x9b\xc0\xae\xea\x7c\x87\xbd\x9d\xfa" +
	"\x7e\x0b\x0a\x4f\x51\xc3\x1c\xac\xbf\xfa\x7a\x56\x6c\x3a\x5b\x10\x14\x46\xd0\x67\x10\x78\x5d\x42\x61\x3a\xcb\x34" +
	"\x1e\x59\x02\x73\x77\x97\xa1\xed\x72\x25\xb9\x26\x01\x46\xc3\x97\x34\x29\xd1\xc5\x0b\xe9\x5e\x76\xb9\x6f\x41\x7c" +
	"\xd3\x4d\xe1\x52\xbe\x94\xae\x06\x04\x47\xec\x80\x3b\x7f\x8b\xd9\x41\x72\xef\x10\x18\xcb\x1b\xfa\xc2\x7e\x53\x73" +
	"\x83\x90\x3f\x5e\xa8\x37\x74\xdb\x91\x39\x74\x26\x3e\xa1\x4e\xf7\x23\x07\xc4\xb1\x90\xa8\x4c\x75\xa4\x6c\xf7\x24" +
	"\xc3\x03\xc5\x6e\x6f\x7b\x40\x35\x71\xd1\xf8\x4c\xc3\x55\x28\xc3\xe3\x15\x43\x48\x6e\xe4\x96\x09\x13\x8d\xd0\x7f" +
	"\xff\x73\xa4\xd7\xa9\x1f\xee\x6a\x12\xde\x42\x7c\xf3\xdf\x23\x90\xa5\xf5\xc3\x09\x90\x3f\x65\xcb\x44\x6e\xbb\x61" +
	"\xc1\xcb\x14\xe6\xa4\x7c\xe4\xf8\x3c\xd9\x3b\xca\x2b\xd2\x95\xab\x5f\xb7\xbe\xdb\x8d\xb6\x3b\x29\x6b\x54\x1c\xe8" +
	"\xa3\x8b\xb1\x83\x07\x15\x88\xcf\xb3\x34\x2c\x1c\xb0\xef\xab\x69\x0f\xa7\xee\x9a\xdc\xd7\xcf\x89\xda\xba\x2e\x9b" +
	"\xa7\x0f\x7a\x77\x98\xd4\xe5\x8b\x4a\xe7\x67\x8d\x3e\x5a\xfb\x7b\x6d\x43\xb6\xca\xcd\x75\xaf\x4f\xc7\xf4\xb6\xa5" +
	"\x42\xa2\x1a\x75\x81\x9f\x99\x80\xfb\xb9\xf0\x2e\x88\x85\x23\x7b\xd8\xee\x4e\xc8\x3a\x16\x47\x9f\x3a\xe2\xc9\x1e" +
	"\xe0\x4b\xee\x07\xd3\x8e\x7b\xf1\xd4\x3b\xf5\x11\x47\xbd\x09\xf7\xd6\xca\x06\xed\xaa\x47\xc9\x04\x6c\xde\xe2\xc2" +
	"\xbb\x33\x2e\x7c\xca\x47\x5d\x11\x4f\x5e\x86\xf7\xee\xb3\x37\x49\x1d\xb7\xe3\x18\x2e\x7f\xec\x7c\x9f\xfb\x95\xa6" +
	"\x82\x98\xd1\xf6\x69\x7f\xfd\x7c\x78\x97\xe1\x3b\x5c\xe0\xdb\xfe\x9d\xa9\x55\x5d\x25\x35\x7f\xbd\x79\xee\x9a\x7a" +
	"\x80\xc2\x4b\xbc\x4e\x2a\x63\x2a\x45\xd8\x4a\x0e\xb9\xd7\xcf\xa5\x4a\xe6\x9c\x5e\x7e\xf0\x02\xd3\x93\xe4\xe4\x24" +
	"\x39\x1d\x46\x47\x9f\xa3\xe2\x18\xe6\xba\x50\x9d\x20\x40\xa5\xa0\x30\x4d\x2b\x95\x2f\xe4\xbd\x22\xf0\x55\x4e\xca" +
	"\x2c\xbf\xbe\x0f\xc6\x82\x1c\x08\xa5\x16\x72\x21\x45\x87\x2a\xbc\xce\x31\x20\x83\x26\x12\x24\x3e\xad\xf6\x4d\xdf" +
	"\x3e\x2f\xf7\x9f\x3e\x27\x14\xdf\xe6\x8f\xcc\xe4\x38\xc5\xb6\x55\xb2\x08\x77\xde\x83\x1d\x59\xda\x3f\x2e\x65\x69" +
	"\xff\x76\xfe\xbf\x00\x00\x00\xff\xff\xa2\x3b\xe3\xe1\x4c\x17\x00\x00")

func frontendIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_frontendIndexHtml,
		"frontend/index.html",
	)
}

func frontendIndexHtml() (*asset, error) {
	bytes, err := frontendIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend/index.html", size: 5964, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1431281697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"frontend/assets/application.coffee": frontendAssetsApplicationCoffee,
	"frontend/assets/application.js":     frontendAssetsApplicationJs,
	"frontend/index.html":                frontendIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"frontend": {nil, map[string]*bintree{
		"assets": {nil, map[string]*bintree{
			"application.coffee": {frontendAssetsApplicationCoffee, map[string]*bintree{}},
			"application.js": {frontendAssetsApplicationJs, map[string]*bintree{}},
		}},
		"index.html": {frontendIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
